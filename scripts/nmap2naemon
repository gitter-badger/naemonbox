#!/bin/bash
# 
# Export Nmap result to Naemon cfg files
#
# Nicolargo - 12/2010
# MG-MONITORING - 01/2015 upgrade for naemon
# Based on: http://blog.nicolargo.com/?p=4011
# 
# Syntaxe: # ./nmaptonaemon.sh <IP address range>
# Exemple: # ./nmaptonaemon.sh 192.168.1.0/24
#
# ToDo List
# - Support de NMap v4.x
#
# GPL
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor Boston, MA 02110-1301,  USA
#
VERSION="0.1.4"

# Where can i find Nagios plugins (optionnal)
NAGIOS_PLUGINS_PATH="/usr/lib/nagios/plugins"

# Are you r00t ?
if [ $EUID -ne 0 ]; then
  echo "Script should be run as root: # sudo $0" 1>&2
  exit 1
fi

# Arguments
#----------

if [ $# -ne 1 ]
then
  echo "Usage: `basename $0` <IP address range>"
  exit 1
fi

# Fonctions
#----------

# Exec a command (quiet mode) and display text
# 1 - command
# 2 - text
function execnodisplay {
	echo -n "$2: Please wait..."
	$1 > /dev/null 2>&1
	echo -e "\r$2: Done (return code $?)"
}

# Exec a command and display text
# 1 - command
# 2 - text
function execdisplay {
	echo "$2: Please wait..."
	$1
	echo "$2: Done (return code $?)"
}

# Display Nmap OS
# 1 - detail
# 2 - running
# 3 - service
function displaynmapos {
	if [ "$1" = "" ]
	then
		if [ "$2" = "" ]
		then
			if [ "$3" = "" ]
			then
				echo "$3"
			else
				echo "OS not detected"
			fi		
		else
			echo "$2"
		fi
	else
		echo "$1"
	fi
}

# Main program
#-------------

DATE=`date +%Y%m%d%H%M%S`

execnodisplay "nmap -sP $1 -oN /tmp/nmap-up.$DATE" "Scan IP address range $1"

cat > /tmp/nmaptonagios-$DATE.cfg << EOF
#
# Generated by nmaptonagios.sh version $VERSION
#

EOF

cat /tmp/nmap-up.$DATE | grep -i "Nmap scan report for" | awk '{ print $5 }' | while read host
do
	# Get host informations
	execnodisplay "nmap -sV -O $host -oN /tmp/nmap-$host.$DATE" "Scan host $host"
	OS_DETAIL=`grep -i "OS details: " /tmp/nmap-$host.$DATE | cut -d\: -f2-`
	OS_RUNNING=`grep -i "Running: " /tmp/nmap-$host.$DATE | cut -d\: -f2-`
	OS_SERVICE=`grep -i "Service Info: " /tmp/nmap-$host.$DATE | cut -d\: -f3-`
	OS_SUMMARY=`displaynmapos "$OS_DETAIL" "$OS_RUNNING" "$OS_SERVICE"`

	# Check for template (can be addapted to your Nagios configuration)
	if [ `expr "$OS_SUMMARY" : ".*[Ll]inux.*"` != 0 ] 
	then
		OS_TEMPLATE="linux-server"
	elif [ `expr "$OS_SUMMARY" : ".*[Bb][Ss][Dd].*"` != 0 ] 
	then
		# No BSD template by default in Nagios, use the Linux one
		OS_TEMPLATE="linux-server"
	elif [ `expr "$OS_SUMMARY" : ".*Mac\ OS.*"` != 0 ] 
	then
		# No Mac OS X template by default in Nagios, use the BSD (so Linux) one
		OS_TEMPLATE="linux-server"
	elif [ `expr "$OS_SUMMARY" : ".*[W]indows.*"` != 0 ] 
	then
		OS_TEMPLATE="windows-server"
	elif [ `expr "$OS_SUMMARY" : ".*[Ss]witch.*"` != 0 ] 
	then
		OS_TEMPLATE="generic-switch"
	else
		OS_TEMPLATE="generic-host"
	fi

	# Generate host in the Nagios .cfg file
	cat >> /tmp/nmaptonagios-$DATE.cfg << EOF
##############################################################################
# Host: $host
# $OS_SUMMARY
define host{
	use		$OS_TEMPLATE
	host_name	$host
	alias		$host
	address		$host
}
EOF

	# Generate service in the Nagios .cfg file
	# for service in `cat /tmp/nmap-$host.$DATE | egrep "^.*/[tcp|udp].*open.*"`
	cat /tmp/nmap-$host.$DATE | egrep "^.*/[tcp|udp].*open.*" | while read service
	do
		# Get service informations
		SERVICE_PORT=`echo $service | cut -d\/ -f1`
		SERVICE_PROTO=`echo $service | cut -d\/ -f2 | cut -d" " -f1`
		SERVICE_NAME=`echo $service | awk '{ print $3 }'`
		SERVICE_DESCRIPTION="$service"

		# Check if a specific Nagios plugin exist
		# Otherwise check proto/port
		SERVICE_CHECK="check_$SERVICE_PROTO!$SERVICE_PORT"
		if [ -d "$NAGIOS_PLUGINS_PATH" ]
		then
			if [ -e "$NAGIOS_PLUGINS_PATH/check_$SERVICE_NAME" ]
			then
				SERVICE_CHECK="check_$SERVICE_NAME"
			fi
		fi

		# Normalize Service entries
		SERVICE_NAME=`echo $SERVICE_NAME | sed 's/[\?\/]/\ /g'`

		cat >> /tmp/nmaptonagios-$DATE.cfg << EOF
# Service($host): $SERVICE_NAME
# $SERVICE_DESCRIPTION
define service{
	use			generic-service
        host_name               $host
        service_description     $SERVICE_NAME
        check_command           $SERVICE_CHECK
}
EOF
		# Next service...
	done
	# Next host
	cat >> /tmp/nmaptonagios-$DATE.cfg << EOF

EOF
done

echo "---------------------------------------------------------------"
echo "Nagios configuration file: /tmp/nmaptonagios-$DATE.cfg"
echo "---------------------------------------------------------------"
rm -f /tmp/nmap-*.$DATE
exit 0

